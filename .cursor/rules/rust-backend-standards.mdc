---
globs: *.rs
description: Rust backend coding standards and best practices
---

# Rust Backend Coding Standards

## Code Organization
- **Module Structure**: Organize code in logical modules in [backend/src/](mdc:backend/src/)
- **Configuration**: Use [backend/src/config.rs](mdc:backend/src/config.rs) for application configuration
- **Error Handling**: Use `anyhow::Result<T>` for error propagation
- **Serialization**: Use `serde` for JSON/TOML serialization with derive macros

## API Design
- **REST Endpoints**: Follow RESTful conventions in [backend/src/server.rs](mdc:backend/src/server.rs)
- **Response Types**: Use consistent response structures with success/error handling
- **HTTP Status Codes**: Use appropriate status codes (200, 400, 404, 500)
- **JSON Responses**: Always return JSON with proper content-type headers

## Database Standards
- **SQLite**: Use SQLite database managed in [backend/src/database.rs](mdc:backend/src/database.rs)
- **Migrations**: Implement proper database schema migrations
- **Connection Pooling**: Use connection pooling for database operations
- **Transactions**: Use transactions for multi-step operations

## Error Handling
- **Result Types**: Use `Result<T, E>` for operations that can fail
- **Error Propagation**: Use `?` operator for error propagation
- **Custom Errors**: Define custom error types when needed
- **Logging**: Use appropriate logging levels (error, warn, info, debug)

## Configuration Management
- **TOML Config**: Store configuration in TOML format
- **Default Values**: Provide sensible defaults in [backend/src/config.rs](mdc:backend/src/config.rs)
- **Environment Variables**: Support environment variable overrides
- **Config Validation**: Validate configuration on startup

## Testing Standards
- **Unit Tests**: Place tests in [backend/tests/](mdc:backend/tests/) directory
- **Integration Tests**: Test API endpoints and database operations
- **Test Data**: Use fixtures and test databases for testing
- **Mocking**: Mock external dependencies in tests

## Performance
- **Async/Await**: Use async/await for I/O operations
- **Connection Pooling**: Pool database connections
- **Caching**: Implement caching for expensive operations
- **Memory Management**: Use appropriate data structures and avoid unnecessary allocations

## Security
- **Input Validation**: Validate all input parameters
- **SQL Injection**: Use parameterized queries
- **CORS**: Configure CORS properly for frontend communication
- **Rate Limiting**: Implement rate limiting for API endpoints

## Documentation
- **Doc Comments**: Use `///` for public API documentation
- **Examples**: Include usage examples in doc comments
- **README**: Maintain up-to-date README with setup instructions
- **API Documentation**: Document all API endpoints

## Dependencies
- **Cargo.toml**: Manage dependencies in [backend/Cargo.toml](mdc:backend/Cargo.toml)
- **Version Pinning**: Pin dependency versions for reproducible builds
- **Feature Flags**: Use feature flags for optional dependencies
- **Security Updates**: Keep dependencies updated for security patches