---
description: API integration patterns and communication between frontend and backend
---

# API Integration Standards

## Frontend-Backend Communication
- **Base URL**: Backend runs on `http://localhost:8080` (configured in [package.json](mdc:package.json) proxy)
- **API Endpoints**: All API calls use `/api/` prefix
- **CORS**: Backend configured to accept requests from frontend origin

## Type Definitions
- **Shared Types**: All API types defined in [src/types.ts](mdc:src/types.ts)
- **Request/Response**: Use consistent interfaces for API communication
- **Type Safety**: Frontend TypeScript interfaces match backend Rust structs

## API Endpoints

### Tools API
- **GET /api/tools**: Retrieve available MCP tools
- **Response Type**: `MCPTool[]` from [src/types.ts](mdc:src/types.ts)

### Projects API
- **GET /api/projects**: List all projects
- **POST /api/projects**: Create new project
- **PUT /api/projects/:id**: Update project
- **DELETE /api/projects/:id**: Delete project
- **Response Type**: `Project[]` from [src/types.ts](mdc:src/types.ts)

### Search API
- **POST /api/search**: Perform full-text search
- **Request**: Search query with filters
- **Response Type**: `SearchResult[]` from [src/types.ts](mdc:src/types.ts)

### Q&A API
- **POST /api/qa**: Ask questions with RAG
- **Request**: Question with context
- **Response Type**: `QAAnswer` from [src/types.ts](mdc:src/types.ts)

### Indexing API
- **POST /api/index**: Index documents/folders
- **GET /api/index/status**: Get indexing status
- **Response Type**: `IndexingResult` from [src/types.ts](mdc:src/types.ts)

## Error Handling
- **HTTP Status Codes**: Use appropriate status codes (200, 400, 404, 500)
- **Error Response**: Consistent error format with message and details
- **Frontend Handling**: Always wrap API calls in try-catch blocks
- **User Feedback**: Display meaningful error messages to users

## Request Patterns
```typescript
// Standard API call pattern
const apiCall = async (endpoint: string, options?: RequestInit) => {
  try {
    const response = await fetch(`/api/${endpoint}`, {
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
      ...options,
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error(`API call failed: ${endpoint}`, error);
    throw error;
  }
};
```

## Loading States
- **Loading Indicators**: Show loading states during API calls
- **Disabled States**: Disable forms/buttons during requests
- **Skeleton Screens**: Use skeleton loading for better UX
- **Error Boundaries**: Implement error boundaries for API failures

## Caching Strategy
- **Client-Side Caching**: Cache API responses when appropriate
- **Cache Invalidation**: Invalidate cache on data mutations
- **Stale-While-Revalidate**: Use SWR pattern for data fetching
- **Local Storage**: Persist user preferences and settings

## Authentication (Future)
- **JWT Tokens**: Use JWT for authentication when implemented
- **Token Storage**: Store tokens securely in httpOnly cookies
- **Token Refresh**: Implement automatic token refresh
- **Protected Routes**: Protect routes that require authentication